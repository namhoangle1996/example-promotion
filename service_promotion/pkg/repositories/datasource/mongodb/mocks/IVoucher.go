// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/wallet-gpay/service-promotion/service_promotion/pkg/models/entities"

	service_promotion "gitlab.com/wallet-gpay/service-promotion/proto/service_promotion"
)

// IVoucher is an autogenerated mock type for the IVoucher type
type IVoucher struct {
	mock.Mock
}

// DecrementTotal provides a mock function with given fields: voucher_id, total
func (_m *IVoucher) DecrementTotal(voucher_id string, total uint64) error {
	ret := _m.Called(voucher_id, total)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(voucher_id, total)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByCode provides a mock function with given fields: code
func (_m *IVoucher) FindByCode(code string) (*entities.Voucher, error) {
	ret := _m.Called(code)

	var r0 *entities.Voucher
	if rf, ok := ret.Get(0).(func(string) *entities.Voucher); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *IVoucher) FindById(id string) (*entities.Voucher, error) {
	ret := _m.Called(id)

	var r0 *entities.Voucher
	if rf, ok := ret.Get(0).(func(string) *entities.Voucher); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: in
func (_m *IVoucher) GetList(in *service_promotion.GetListPromotionRequest) ([]*entities.Voucher, error) {
	ret := _m.Called(in)

	var r0 []*entities.Voucher
	if rf, ok := ret.Get(0).(func(*service_promotion.GetListPromotionRequest) []*entities.Voucher); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*service_promotion.GetListPromotionRequest) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementTotal provides a mock function with given fields: voucher_id, total
func (_m *IVoucher) IncrementTotal(voucher_id string, total uint64) error {
	ret := _m.Called(voucher_id, total)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(voucher_id, total)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
