// Code generated by mockery v2.0.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/wallet-gpay/service-promotion/service_promotion/pkg/models/entities"
)

// IUserHasVoucher is an autogenerated mock type for the IUserHasVoucher type
type IUserHasVoucher struct {
	mock.Mock
}

// Create provides a mock function with given fields: user_voucher
func (_m *IUserHasVoucher) Create(user_voucher entities.PromotionUser) error {
	ret := _m.Called(user_voucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.PromotionUser) error); ok {
		r0 = rf(user_voucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementTotalVoucher provides a mock function with given fields: id, user_id, total
func (_m *IUserHasVoucher) DecrementTotalVoucher(id string, user_id string, total int64) error {
	ret := _m.Called(id, user_id, total)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(id, user_id, total)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByCode provides a mock function with given fields: user_id, code
func (_m *IUserHasVoucher) FindByCode(user_id string, code string) (*entities.PromotionUser, error) {
	ret := _m.Called(user_id, code)

	var r0 *entities.PromotionUser
	if rf, ok := ret.Get(0).(func(string, string) *entities.PromotionUser); ok {
		r0 = rf(user_id, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PromotionUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user_id, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: user_id, id
func (_m *IUserHasVoucher) FindById(user_id string, id string) (*entities.PromotionUser, error) {
	ret := _m.Called(user_id, id)

	var r0 *entities.PromotionUser
	if rf, ok := ret.Get(0).(func(string, string) *entities.PromotionUser); ok {
		r0 = rf(user_id, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PromotionUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user_id, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: user_id, offset
func (_m *IUserHasVoucher) Get(user_id string, offset int64) ([]*entities.PromotionUser, error) {
	ret := _m.Called(user_id, offset)

	var r0 []*entities.PromotionUser
	if rf, ok := ret.Get(0).(func(string, int64) []*entities.PromotionUser); ok {
		r0 = rf(user_id, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.PromotionUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(user_id, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementTotalVoucher provides a mock function with given fields: id, user_id, total
func (_m *IUserHasVoucher) IncrementTotalVoucher(id string, user_id string, total int64) error {
	ret := _m.Called(id, user_id, total)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(id, user_id, total)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: user_voucher
func (_m *IUserHasVoucher) Update(user_voucher entities.PromotionUser) error {
	ret := _m.Called(user_voucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.PromotionUser) error); ok {
		r0 = rf(user_voucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
