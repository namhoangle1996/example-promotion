// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service_user/service.proto

package service_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Service service

type Service interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...client.CallOption) (*FindUserByIdResponse, error)
	FindUserByEmail(ctx context.Context, in *FindUserByEmailRequest, opts ...client.CallOption) (*FindUserByEmailResponse, error)
	FindUserByPhone(ctx context.Context, in *FindUserByPhoneRequest, opts ...client.CallOption) (*FindUserByPhoneResponse, error)
	FindUserDetailById(ctx context.Context, in *FindUserDetailByIdRequest, opts ...client.CallOption) (*FindUserDetailByIdResponse, error)
	FindUserDetailByPhone(ctx context.Context, in *FindUserDetailByPhoneRequest, opts ...client.CallOption) (*FindUserDetailByPhoneResponse, error)
	FindUserDetailByEmail(ctx context.Context, in *FindUserDetailByEmailRequest, opts ...client.CallOption) (*FindUserDetailByEmailResponse, error)
	FindMerchantAccountByCode(ctx context.Context, in *FindMerchantAccountByCodeRequest, opts ...client.CallOption) (*FindMerchantAccountByCodeResponse, error)
	FindMerchantAccountByID(ctx context.Context, in *FindMerchantAccountByIdRequest, opts ...client.CallOption) (*FindMerchantAccountByIdResponse, error)
	FindMerchantAccountByUserID(ctx context.Context, in *FindMerchantAccountByUserIdRequest, opts ...client.CallOption) (*FindMerchantAccountByUserIdResponse, error)
}

type service struct {
	c    client.Client
	name string
}

func NewService(name string, c client.Client) Service {
	return &service{
		c:    c,
		name: name,
	}
}

func (c *service) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Service.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Service.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...client.CallOption) (*FindUserByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindUserById", in)
	out := new(FindUserByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindUserByEmail(ctx context.Context, in *FindUserByEmailRequest, opts ...client.CallOption) (*FindUserByEmailResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindUserByEmail", in)
	out := new(FindUserByEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindUserByPhone(ctx context.Context, in *FindUserByPhoneRequest, opts ...client.CallOption) (*FindUserByPhoneResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindUserByPhone", in)
	out := new(FindUserByPhoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindUserDetailById(ctx context.Context, in *FindUserDetailByIdRequest, opts ...client.CallOption) (*FindUserDetailByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindUserDetailById", in)
	out := new(FindUserDetailByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindUserDetailByPhone(ctx context.Context, in *FindUserDetailByPhoneRequest, opts ...client.CallOption) (*FindUserDetailByPhoneResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindUserDetailByPhone", in)
	out := new(FindUserDetailByPhoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindUserDetailByEmail(ctx context.Context, in *FindUserDetailByEmailRequest, opts ...client.CallOption) (*FindUserDetailByEmailResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindUserDetailByEmail", in)
	out := new(FindUserDetailByEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindMerchantAccountByCode(ctx context.Context, in *FindMerchantAccountByCodeRequest, opts ...client.CallOption) (*FindMerchantAccountByCodeResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindMerchantAccountByCode", in)
	out := new(FindMerchantAccountByCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindMerchantAccountByID(ctx context.Context, in *FindMerchantAccountByIdRequest, opts ...client.CallOption) (*FindMerchantAccountByIdResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindMerchantAccountByID", in)
	out := new(FindMerchantAccountByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindMerchantAccountByUserID(ctx context.Context, in *FindMerchantAccountByUserIdRequest, opts ...client.CallOption) (*FindMerchantAccountByUserIdResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindMerchantAccountByUserID", in)
	out := new(FindMerchantAccountByUserIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	FindUserById(context.Context, *FindUserByIdRequest, *FindUserByIdResponse) error
	FindUserByEmail(context.Context, *FindUserByEmailRequest, *FindUserByEmailResponse) error
	FindUserByPhone(context.Context, *FindUserByPhoneRequest, *FindUserByPhoneResponse) error
	FindUserDetailById(context.Context, *FindUserDetailByIdRequest, *FindUserDetailByIdResponse) error
	FindUserDetailByPhone(context.Context, *FindUserDetailByPhoneRequest, *FindUserDetailByPhoneResponse) error
	FindUserDetailByEmail(context.Context, *FindUserDetailByEmailRequest, *FindUserDetailByEmailResponse) error
	FindMerchantAccountByCode(context.Context, *FindMerchantAccountByCodeRequest, *FindMerchantAccountByCodeResponse) error
	FindMerchantAccountByID(context.Context, *FindMerchantAccountByIdRequest, *FindMerchantAccountByIdResponse) error
	FindMerchantAccountByUserID(context.Context, *FindMerchantAccountByUserIdRequest, *FindMerchantAccountByUserIdResponse) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) error {
	type service interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error
		FindUserById(ctx context.Context, in *FindUserByIdRequest, out *FindUserByIdResponse) error
		FindUserByEmail(ctx context.Context, in *FindUserByEmailRequest, out *FindUserByEmailResponse) error
		FindUserByPhone(ctx context.Context, in *FindUserByPhoneRequest, out *FindUserByPhoneResponse) error
		FindUserDetailById(ctx context.Context, in *FindUserDetailByIdRequest, out *FindUserDetailByIdResponse) error
		FindUserDetailByPhone(ctx context.Context, in *FindUserDetailByPhoneRequest, out *FindUserDetailByPhoneResponse) error
		FindUserDetailByEmail(ctx context.Context, in *FindUserDetailByEmailRequest, out *FindUserDetailByEmailResponse) error
		FindMerchantAccountByCode(ctx context.Context, in *FindMerchantAccountByCodeRequest, out *FindMerchantAccountByCodeResponse) error
		FindMerchantAccountByID(ctx context.Context, in *FindMerchantAccountByIdRequest, out *FindMerchantAccountByIdResponse) error
		FindMerchantAccountByUserID(ctx context.Context, in *FindMerchantAccountByUserIdRequest, out *FindMerchantAccountByUserIdResponse) error
	}
	type Service struct {
		service
	}
	h := &serviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Service{h}, opts...))
}

type serviceHandler struct {
	ServiceHandler
}

func (h *serviceHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.ServiceHandler.CreateUser(ctx, in, out)
}

func (h *serviceHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.ServiceHandler.UpdateUser(ctx, in, out)
}

func (h *serviceHandler) FindUserById(ctx context.Context, in *FindUserByIdRequest, out *FindUserByIdResponse) error {
	return h.ServiceHandler.FindUserById(ctx, in, out)
}

func (h *serviceHandler) FindUserByEmail(ctx context.Context, in *FindUserByEmailRequest, out *FindUserByEmailResponse) error {
	return h.ServiceHandler.FindUserByEmail(ctx, in, out)
}

func (h *serviceHandler) FindUserByPhone(ctx context.Context, in *FindUserByPhoneRequest, out *FindUserByPhoneResponse) error {
	return h.ServiceHandler.FindUserByPhone(ctx, in, out)
}

func (h *serviceHandler) FindUserDetailById(ctx context.Context, in *FindUserDetailByIdRequest, out *FindUserDetailByIdResponse) error {
	return h.ServiceHandler.FindUserDetailById(ctx, in, out)
}

func (h *serviceHandler) FindUserDetailByPhone(ctx context.Context, in *FindUserDetailByPhoneRequest, out *FindUserDetailByPhoneResponse) error {
	return h.ServiceHandler.FindUserDetailByPhone(ctx, in, out)
}

func (h *serviceHandler) FindUserDetailByEmail(ctx context.Context, in *FindUserDetailByEmailRequest, out *FindUserDetailByEmailResponse) error {
	return h.ServiceHandler.FindUserDetailByEmail(ctx, in, out)
}

func (h *serviceHandler) FindMerchantAccountByCode(ctx context.Context, in *FindMerchantAccountByCodeRequest, out *FindMerchantAccountByCodeResponse) error {
	return h.ServiceHandler.FindMerchantAccountByCode(ctx, in, out)
}

func (h *serviceHandler) FindMerchantAccountByID(ctx context.Context, in *FindMerchantAccountByIdRequest, out *FindMerchantAccountByIdResponse) error {
	return h.ServiceHandler.FindMerchantAccountByID(ctx, in, out)
}

func (h *serviceHandler) FindMerchantAccountByUserID(ctx context.Context, in *FindMerchantAccountByUserIdRequest, out *FindMerchantAccountByUserIdResponse) error {
	return h.ServiceHandler.FindMerchantAccountByUserID(ctx, in, out)
}
