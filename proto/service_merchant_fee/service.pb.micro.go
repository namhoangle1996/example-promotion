// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service_merchant_fee/service.proto

package service_merchant_fee

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Service service

func NewServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Service service

type Service interface {
	CheckMerchantQuota(ctx context.Context, in *CheckMerchantQuotaRequest, opts ...client.CallOption) (*CheckMerchantQuotaResponse, error)
	CheckMerchantQuotaAndFee(ctx context.Context, in *CheckMerchantQuotaAndFeeReq, opts ...client.CallOption) (*CheckMerchantQuotaAndFeeRes, error)
	GetMerchantVendorDiscount(ctx context.Context, in *GetMerchantVendorDiscountReq, opts ...client.CallOption) (*GetMerchantVendorDiscountRes, error)
	CreateFeeCheckLog(ctx context.Context, in *CreateFeeCheckLogReq, opts ...client.CallOption) (*CreateFeeCheckLogRes, error)
	CreateFeeCheckLogPeriod(ctx context.Context, in *CreateFeeCheckLogPeriodReq, opts ...client.CallOption) (*CreateFeeCheckLogRes, error)
	CrossCheckStatusUpdates(ctx context.Context, in *CrossCheckStatusUpdatesReq, opts ...client.CallOption) (*CrossCheckStatusUpdatesRes, error)
	Settlement(ctx context.Context, in *SettlementReq, opts ...client.CallOption) (*SettlementRes, error)
}

type service struct {
	c    client.Client
	name string
}

func NewService(name string, c client.Client) Service {
	return &service{
		c:    c,
		name: name,
	}
}

func (c *service) CheckMerchantQuota(ctx context.Context, in *CheckMerchantQuotaRequest, opts ...client.CallOption) (*CheckMerchantQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "Service.CheckMerchantQuota", in)
	out := new(CheckMerchantQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CheckMerchantQuotaAndFee(ctx context.Context, in *CheckMerchantQuotaAndFeeReq, opts ...client.CallOption) (*CheckMerchantQuotaAndFeeRes, error) {
	req := c.c.NewRequest(c.name, "Service.CheckMerchantQuotaAndFee", in)
	out := new(CheckMerchantQuotaAndFeeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) GetMerchantVendorDiscount(ctx context.Context, in *GetMerchantVendorDiscountReq, opts ...client.CallOption) (*GetMerchantVendorDiscountRes, error) {
	req := c.c.NewRequest(c.name, "Service.GetMerchantVendorDiscount", in)
	out := new(GetMerchantVendorDiscountRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CreateFeeCheckLog(ctx context.Context, in *CreateFeeCheckLogReq, opts ...client.CallOption) (*CreateFeeCheckLogRes, error) {
	req := c.c.NewRequest(c.name, "Service.CreateFeeCheckLog", in)
	out := new(CreateFeeCheckLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CreateFeeCheckLogPeriod(ctx context.Context, in *CreateFeeCheckLogPeriodReq, opts ...client.CallOption) (*CreateFeeCheckLogRes, error) {
	req := c.c.NewRequest(c.name, "Service.CreateFeeCheckLogPeriod", in)
	out := new(CreateFeeCheckLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CrossCheckStatusUpdates(ctx context.Context, in *CrossCheckStatusUpdatesReq, opts ...client.CallOption) (*CrossCheckStatusUpdatesRes, error) {
	req := c.c.NewRequest(c.name, "Service.CrossCheckStatusUpdates", in)
	out := new(CrossCheckStatusUpdatesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Settlement(ctx context.Context, in *SettlementReq, opts ...client.CallOption) (*SettlementRes, error) {
	req := c.c.NewRequest(c.name, "Service.Settlement", in)
	out := new(SettlementRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	CheckMerchantQuota(context.Context, *CheckMerchantQuotaRequest, *CheckMerchantQuotaResponse) error
	CheckMerchantQuotaAndFee(context.Context, *CheckMerchantQuotaAndFeeReq, *CheckMerchantQuotaAndFeeRes) error
	GetMerchantVendorDiscount(context.Context, *GetMerchantVendorDiscountReq, *GetMerchantVendorDiscountRes) error
	CreateFeeCheckLog(context.Context, *CreateFeeCheckLogReq, *CreateFeeCheckLogRes) error
	CreateFeeCheckLogPeriod(context.Context, *CreateFeeCheckLogPeriodReq, *CreateFeeCheckLogRes) error
	CrossCheckStatusUpdates(context.Context, *CrossCheckStatusUpdatesReq, *CrossCheckStatusUpdatesRes) error
	Settlement(context.Context, *SettlementReq, *SettlementRes) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) error {
	type service interface {
		CheckMerchantQuota(ctx context.Context, in *CheckMerchantQuotaRequest, out *CheckMerchantQuotaResponse) error
		CheckMerchantQuotaAndFee(ctx context.Context, in *CheckMerchantQuotaAndFeeReq, out *CheckMerchantQuotaAndFeeRes) error
		GetMerchantVendorDiscount(ctx context.Context, in *GetMerchantVendorDiscountReq, out *GetMerchantVendorDiscountRes) error
		CreateFeeCheckLog(ctx context.Context, in *CreateFeeCheckLogReq, out *CreateFeeCheckLogRes) error
		CreateFeeCheckLogPeriod(ctx context.Context, in *CreateFeeCheckLogPeriodReq, out *CreateFeeCheckLogRes) error
		CrossCheckStatusUpdates(ctx context.Context, in *CrossCheckStatusUpdatesReq, out *CrossCheckStatusUpdatesRes) error
		Settlement(ctx context.Context, in *SettlementReq, out *SettlementRes) error
	}
	type Service struct {
		service
	}
	h := &serviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Service{h}, opts...))
}

type serviceHandler struct {
	ServiceHandler
}

func (h *serviceHandler) CheckMerchantQuota(ctx context.Context, in *CheckMerchantQuotaRequest, out *CheckMerchantQuotaResponse) error {
	return h.ServiceHandler.CheckMerchantQuota(ctx, in, out)
}

func (h *serviceHandler) CheckMerchantQuotaAndFee(ctx context.Context, in *CheckMerchantQuotaAndFeeReq, out *CheckMerchantQuotaAndFeeRes) error {
	return h.ServiceHandler.CheckMerchantQuotaAndFee(ctx, in, out)
}

func (h *serviceHandler) GetMerchantVendorDiscount(ctx context.Context, in *GetMerchantVendorDiscountReq, out *GetMerchantVendorDiscountRes) error {
	return h.ServiceHandler.GetMerchantVendorDiscount(ctx, in, out)
}

func (h *serviceHandler) CreateFeeCheckLog(ctx context.Context, in *CreateFeeCheckLogReq, out *CreateFeeCheckLogRes) error {
	return h.ServiceHandler.CreateFeeCheckLog(ctx, in, out)
}

func (h *serviceHandler) CreateFeeCheckLogPeriod(ctx context.Context, in *CreateFeeCheckLogPeriodReq, out *CreateFeeCheckLogRes) error {
	return h.ServiceHandler.CreateFeeCheckLogPeriod(ctx, in, out)
}

func (h *serviceHandler) CrossCheckStatusUpdates(ctx context.Context, in *CrossCheckStatusUpdatesReq, out *CrossCheckStatusUpdatesRes) error {
	return h.ServiceHandler.CrossCheckStatusUpdates(ctx, in, out)
}

func (h *serviceHandler) Settlement(ctx context.Context, in *SettlementReq, out *SettlementRes) error {
	return h.ServiceHandler.Settlement(ctx, in, out)
}
