// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service_transaction/service.proto

package service_transaction

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Service service

func NewServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Service service

type Service interface {
	FindByTransactionId(ctx context.Context, in *FindByTransactionIdRequest, opts ...client.CallOption) (*FindByTransactionIdResponse, error)
	FilterTransaction(ctx context.Context, in *FilterTransactionRequest, opts ...client.CallOption) (*FilterTransactionResponse, error)
	InitPayment(ctx context.Context, in *TransactionDTO, opts ...client.CallOption) (*InitTransactionResponse, error)
	MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...client.CallOption) (*MakePaymentResponse, error)
	CancelTransactionId(ctx context.Context, in *CancelTransactionIdRequest, opts ...client.CallOption) (*CancelTransactionIdResponse, error)
	UpdateTransactionById(ctx context.Context, in *TransactionRequest, opts ...client.CallOption) (*UpdateTransactionResponse, error)
	CheckPendingTransactionShip(ctx context.Context, in *CheckPendingTransactionRequest, opts ...client.CallOption) (*CheckPendingTransactionResponse, error)
	ProcessCashback(ctx context.Context, in *ProcessCashbackRequest, opts ...client.CallOption) (*ProcessCashbackResponse, error)
	UpdateIncrementAmount(ctx context.Context, in *UpdateIncrementAmountRequest, opts ...client.CallOption) (*UpdateIncrementAmountResponse, error)
	UpdateDecrementAmount(ctx context.Context, in *UpdateDecrementAmountRequest, opts ...client.CallOption) (*UpdateDecrementAmountResponse, error)
	UpdateUserIncurred(ctx context.Context, in *UpdateUserIncurredRequest, opts ...client.CallOption) (*UpdateUserIncurredResponse, error)
	CheckTransactionLimitFee(ctx context.Context, in *CheckTransactionLimitFeeRequest, opts ...client.CallOption) (*CheckTransactionLimitFeeResponse, error)
	GetUserLimit(ctx context.Context, in *CheckTransactionQuotaAndFeeReq, opts ...client.CallOption) (*GetUserLimitResponse, error)
	GetTransactionAmountByTimeRange(ctx context.Context, in *GetTransactionAmountRequest, opts ...client.CallOption) (*GetTransactionAmountResponse, error)
	CountTransactionsByTimeRange(ctx context.Context, in *CountTransactionsRequest, opts ...client.CallOption) (*CountTransactionsResponse, error)
	FindTransactionByID(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error)
	InitTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error)
	ConfirmTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error)
	CheckTransactionQuotaAndFee(ctx context.Context, in *CheckTransactionQuotaAndFeeReq, opts ...client.CallOption) (*CheckTransactionQuotaAndFeeRes, error)
	UpdateTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error)
	CancelTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error)
	GetCheckFeeSuccessTransactionStatsByTimeRange(ctx context.Context, in *GetCheckFeeSuccessTransactionStatsByTimeRangeReq, opts ...client.CallOption) (*GetCheckFeeSuccessTransactionStatsByTimeRangeRes, error)
	CountCheckFeeTransactionsByTimeRange(ctx context.Context, in *CountCheckFeeTransactionsByTimeRangeReq, opts ...client.CallOption) (*CountCheckFeeTransactionsByTimeRangeRes, error)
	FindCheckFeeTransactionsByTimeRange(ctx context.Context, in *FindCheckFeeTransactionsByTimeRangeReq, opts ...client.CallOption) (*ListETransactionDTO, error)
	// Đảo giao dịch
	ReverseTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error)
	//Thay đổi trạng thái đối soát
	ChangeStatusChecking(ctx context.Context, in *ChangeStatusCheckingRequest, opts ...client.CallOption) (*ChangeStatusCheckingRequest, error)
	//Thay đổi trạng thái quyết toán
	ChangeStatusSettlement(ctx context.Context, in *ChangeStatusSettlementRequest, opts ...client.CallOption) (*ChangeStatusSettlementRequest, error)
	//Quyết toán
	AccountingSettlement(ctx context.Context, in *AccountingSettlementRequest, opts ...client.CallOption) (*AccountingSettlementRequest, error)
	//Quyết toán Nạp tiền Promotion
	AccountingPromotionDeposit(ctx context.Context, in *AccountingPromotionDepositRequest, opts ...client.CallOption) (*AccountingPromotionDepositRequest, error)
	//Quyết toán Rút tiền Promotion
	AccountingPromotionWithdraw(ctx context.Context, in *AccountingPromotionWithdrawRequest, opts ...client.CallOption) (*AccountingPromotionWithdrawRequest, error)
	//Bút toán kết chuyển GL Gpay
	AccountingChangeGpay(ctx context.Context, in *AccountingChangeGpayRequest, opts ...client.CallOption) (*AccountingChangeGpayRequest, error)
	//Nạp wallet GPAY
	DepositGpay(ctx context.Context, in *DepositGpayRequest, opts ...client.CallOption) (*DepositGpayRequest, error)
	//withdraw wallet GPAY
	WithdrawWallet(ctx context.Context, in *WithdrawWalletRequest, opts ...client.CallOption) (*WithdrawWalletRequest, error)
	//Quyết toán Rút tiền Promotion
	AccountingPromotion(ctx context.Context, in *AccountingPromotionRequest, opts ...client.CallOption) (*AccountingPromotionRequest, error)
	FindTransactionByParams(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error)
	// Init merchant acount after create merchant
	InitMerchantAccount(ctx context.Context, in *InitMerchantAccountReq, opts ...client.CallOption) (*InitMerchantAccountReq, error)
}

type service struct {
	c    client.Client
	name string
}

func NewService(name string, c client.Client) Service {
	return &service{
		c:    c,
		name: name,
	}
}

func (c *service) FindByTransactionId(ctx context.Context, in *FindByTransactionIdRequest, opts ...client.CallOption) (*FindByTransactionIdResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FindByTransactionId", in)
	out := new(FindByTransactionIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FilterTransaction(ctx context.Context, in *FilterTransactionRequest, opts ...client.CallOption) (*FilterTransactionResponse, error) {
	req := c.c.NewRequest(c.name, "Service.FilterTransaction", in)
	out := new(FilterTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InitPayment(ctx context.Context, in *TransactionDTO, opts ...client.CallOption) (*InitTransactionResponse, error) {
	req := c.c.NewRequest(c.name, "Service.InitPayment", in)
	out := new(InitTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...client.CallOption) (*MakePaymentResponse, error) {
	req := c.c.NewRequest(c.name, "Service.MakePayment", in)
	out := new(MakePaymentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CancelTransactionId(ctx context.Context, in *CancelTransactionIdRequest, opts ...client.CallOption) (*CancelTransactionIdResponse, error) {
	req := c.c.NewRequest(c.name, "Service.CancelTransactionId", in)
	out := new(CancelTransactionIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UpdateTransactionById(ctx context.Context, in *TransactionRequest, opts ...client.CallOption) (*UpdateTransactionResponse, error) {
	req := c.c.NewRequest(c.name, "Service.UpdateTransactionById", in)
	out := new(UpdateTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CheckPendingTransactionShip(ctx context.Context, in *CheckPendingTransactionRequest, opts ...client.CallOption) (*CheckPendingTransactionResponse, error) {
	req := c.c.NewRequest(c.name, "Service.CheckPendingTransactionShip", in)
	out := new(CheckPendingTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) ProcessCashback(ctx context.Context, in *ProcessCashbackRequest, opts ...client.CallOption) (*ProcessCashbackResponse, error) {
	req := c.c.NewRequest(c.name, "Service.ProcessCashback", in)
	out := new(ProcessCashbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UpdateIncrementAmount(ctx context.Context, in *UpdateIncrementAmountRequest, opts ...client.CallOption) (*UpdateIncrementAmountResponse, error) {
	req := c.c.NewRequest(c.name, "Service.UpdateIncrementAmount", in)
	out := new(UpdateIncrementAmountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UpdateDecrementAmount(ctx context.Context, in *UpdateDecrementAmountRequest, opts ...client.CallOption) (*UpdateDecrementAmountResponse, error) {
	req := c.c.NewRequest(c.name, "Service.UpdateDecrementAmount", in)
	out := new(UpdateDecrementAmountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UpdateUserIncurred(ctx context.Context, in *UpdateUserIncurredRequest, opts ...client.CallOption) (*UpdateUserIncurredResponse, error) {
	req := c.c.NewRequest(c.name, "Service.UpdateUserIncurred", in)
	out := new(UpdateUserIncurredResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CheckTransactionLimitFee(ctx context.Context, in *CheckTransactionLimitFeeRequest, opts ...client.CallOption) (*CheckTransactionLimitFeeResponse, error) {
	req := c.c.NewRequest(c.name, "Service.CheckTransactionLimitFee", in)
	out := new(CheckTransactionLimitFeeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) GetUserLimit(ctx context.Context, in *CheckTransactionQuotaAndFeeReq, opts ...client.CallOption) (*GetUserLimitResponse, error) {
	req := c.c.NewRequest(c.name, "Service.GetUserLimit", in)
	out := new(GetUserLimitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) GetTransactionAmountByTimeRange(ctx context.Context, in *GetTransactionAmountRequest, opts ...client.CallOption) (*GetTransactionAmountResponse, error) {
	req := c.c.NewRequest(c.name, "Service.GetTransactionAmountByTimeRange", in)
	out := new(GetTransactionAmountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CountTransactionsByTimeRange(ctx context.Context, in *CountTransactionsRequest, opts ...client.CallOption) (*CountTransactionsResponse, error) {
	req := c.c.NewRequest(c.name, "Service.CountTransactionsByTimeRange", in)
	out := new(CountTransactionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindTransactionByID(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error) {
	req := c.c.NewRequest(c.name, "Service.FindTransactionByID", in)
	out := new(ETransactionDTO)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InitTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error) {
	req := c.c.NewRequest(c.name, "Service.InitTransaction", in)
	out := new(ETransactionDTO)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) ConfirmTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error) {
	req := c.c.NewRequest(c.name, "Service.ConfirmTransaction", in)
	out := new(ETransactionDTO)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CheckTransactionQuotaAndFee(ctx context.Context, in *CheckTransactionQuotaAndFeeReq, opts ...client.CallOption) (*CheckTransactionQuotaAndFeeRes, error) {
	req := c.c.NewRequest(c.name, "Service.CheckTransactionQuotaAndFee", in)
	out := new(CheckTransactionQuotaAndFeeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UpdateTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error) {
	req := c.c.NewRequest(c.name, "Service.UpdateTransaction", in)
	out := new(ETransactionDTO)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CancelTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error) {
	req := c.c.NewRequest(c.name, "Service.CancelTransaction", in)
	out := new(ETransactionDTO)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) GetCheckFeeSuccessTransactionStatsByTimeRange(ctx context.Context, in *GetCheckFeeSuccessTransactionStatsByTimeRangeReq, opts ...client.CallOption) (*GetCheckFeeSuccessTransactionStatsByTimeRangeRes, error) {
	req := c.c.NewRequest(c.name, "Service.GetCheckFeeSuccessTransactionStatsByTimeRange", in)
	out := new(GetCheckFeeSuccessTransactionStatsByTimeRangeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CountCheckFeeTransactionsByTimeRange(ctx context.Context, in *CountCheckFeeTransactionsByTimeRangeReq, opts ...client.CallOption) (*CountCheckFeeTransactionsByTimeRangeRes, error) {
	req := c.c.NewRequest(c.name, "Service.CountCheckFeeTransactionsByTimeRange", in)
	out := new(CountCheckFeeTransactionsByTimeRangeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindCheckFeeTransactionsByTimeRange(ctx context.Context, in *FindCheckFeeTransactionsByTimeRangeReq, opts ...client.CallOption) (*ListETransactionDTO, error) {
	req := c.c.NewRequest(c.name, "Service.FindCheckFeeTransactionsByTimeRange", in)
	out := new(ListETransactionDTO)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) ReverseTransaction(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error) {
	req := c.c.NewRequest(c.name, "Service.ReverseTransaction", in)
	out := new(ETransactionDTO)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) ChangeStatusChecking(ctx context.Context, in *ChangeStatusCheckingRequest, opts ...client.CallOption) (*ChangeStatusCheckingRequest, error) {
	req := c.c.NewRequest(c.name, "Service.ChangeStatusChecking", in)
	out := new(ChangeStatusCheckingRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) ChangeStatusSettlement(ctx context.Context, in *ChangeStatusSettlementRequest, opts ...client.CallOption) (*ChangeStatusSettlementRequest, error) {
	req := c.c.NewRequest(c.name, "Service.ChangeStatusSettlement", in)
	out := new(ChangeStatusSettlementRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) AccountingSettlement(ctx context.Context, in *AccountingSettlementRequest, opts ...client.CallOption) (*AccountingSettlementRequest, error) {
	req := c.c.NewRequest(c.name, "Service.AccountingSettlement", in)
	out := new(AccountingSettlementRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) AccountingPromotionDeposit(ctx context.Context, in *AccountingPromotionDepositRequest, opts ...client.CallOption) (*AccountingPromotionDepositRequest, error) {
	req := c.c.NewRequest(c.name, "Service.AccountingPromotionDeposit", in)
	out := new(AccountingPromotionDepositRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) AccountingPromotionWithdraw(ctx context.Context, in *AccountingPromotionWithdrawRequest, opts ...client.CallOption) (*AccountingPromotionWithdrawRequest, error) {
	req := c.c.NewRequest(c.name, "Service.AccountingPromotionWithdraw", in)
	out := new(AccountingPromotionWithdrawRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) AccountingChangeGpay(ctx context.Context, in *AccountingChangeGpayRequest, opts ...client.CallOption) (*AccountingChangeGpayRequest, error) {
	req := c.c.NewRequest(c.name, "Service.AccountingChangeGpay", in)
	out := new(AccountingChangeGpayRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) DepositGpay(ctx context.Context, in *DepositGpayRequest, opts ...client.CallOption) (*DepositGpayRequest, error) {
	req := c.c.NewRequest(c.name, "Service.DepositGpay", in)
	out := new(DepositGpayRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) WithdrawWallet(ctx context.Context, in *WithdrawWalletRequest, opts ...client.CallOption) (*WithdrawWalletRequest, error) {
	req := c.c.NewRequest(c.name, "Service.WithdrawWallet", in)
	out := new(WithdrawWalletRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) AccountingPromotion(ctx context.Context, in *AccountingPromotionRequest, opts ...client.CallOption) (*AccountingPromotionRequest, error) {
	req := c.c.NewRequest(c.name, "Service.AccountingPromotion", in)
	out := new(AccountingPromotionRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) FindTransactionByParams(ctx context.Context, in *ETransactionDTO, opts ...client.CallOption) (*ETransactionDTO, error) {
	req := c.c.NewRequest(c.name, "Service.FindTransactionByParams", in)
	out := new(ETransactionDTO)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InitMerchantAccount(ctx context.Context, in *InitMerchantAccountReq, opts ...client.CallOption) (*InitMerchantAccountReq, error) {
	req := c.c.NewRequest(c.name, "Service.InitMerchantAccount", in)
	out := new(InitMerchantAccountReq)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	FindByTransactionId(context.Context, *FindByTransactionIdRequest, *FindByTransactionIdResponse) error
	FilterTransaction(context.Context, *FilterTransactionRequest, *FilterTransactionResponse) error
	InitPayment(context.Context, *TransactionDTO, *InitTransactionResponse) error
	MakePayment(context.Context, *MakePaymentRequest, *MakePaymentResponse) error
	CancelTransactionId(context.Context, *CancelTransactionIdRequest, *CancelTransactionIdResponse) error
	UpdateTransactionById(context.Context, *TransactionRequest, *UpdateTransactionResponse) error
	CheckPendingTransactionShip(context.Context, *CheckPendingTransactionRequest, *CheckPendingTransactionResponse) error
	ProcessCashback(context.Context, *ProcessCashbackRequest, *ProcessCashbackResponse) error
	UpdateIncrementAmount(context.Context, *UpdateIncrementAmountRequest, *UpdateIncrementAmountResponse) error
	UpdateDecrementAmount(context.Context, *UpdateDecrementAmountRequest, *UpdateDecrementAmountResponse) error
	UpdateUserIncurred(context.Context, *UpdateUserIncurredRequest, *UpdateUserIncurredResponse) error
	CheckTransactionLimitFee(context.Context, *CheckTransactionLimitFeeRequest, *CheckTransactionLimitFeeResponse) error
	GetUserLimit(context.Context, *CheckTransactionQuotaAndFeeReq, *GetUserLimitResponse) error
	GetTransactionAmountByTimeRange(context.Context, *GetTransactionAmountRequest, *GetTransactionAmountResponse) error
	CountTransactionsByTimeRange(context.Context, *CountTransactionsRequest, *CountTransactionsResponse) error
	FindTransactionByID(context.Context, *ETransactionDTO, *ETransactionDTO) error
	InitTransaction(context.Context, *ETransactionDTO, *ETransactionDTO) error
	ConfirmTransaction(context.Context, *ETransactionDTO, *ETransactionDTO) error
	CheckTransactionQuotaAndFee(context.Context, *CheckTransactionQuotaAndFeeReq, *CheckTransactionQuotaAndFeeRes) error
	UpdateTransaction(context.Context, *ETransactionDTO, *ETransactionDTO) error
	CancelTransaction(context.Context, *ETransactionDTO, *ETransactionDTO) error
	GetCheckFeeSuccessTransactionStatsByTimeRange(context.Context, *GetCheckFeeSuccessTransactionStatsByTimeRangeReq, *GetCheckFeeSuccessTransactionStatsByTimeRangeRes) error
	CountCheckFeeTransactionsByTimeRange(context.Context, *CountCheckFeeTransactionsByTimeRangeReq, *CountCheckFeeTransactionsByTimeRangeRes) error
	FindCheckFeeTransactionsByTimeRange(context.Context, *FindCheckFeeTransactionsByTimeRangeReq, *ListETransactionDTO) error
	// Đảo giao dịch
	ReverseTransaction(context.Context, *ETransactionDTO, *ETransactionDTO) error
	//Thay đổi trạng thái đối soát
	ChangeStatusChecking(context.Context, *ChangeStatusCheckingRequest, *ChangeStatusCheckingRequest) error
	//Thay đổi trạng thái quyết toán
	ChangeStatusSettlement(context.Context, *ChangeStatusSettlementRequest, *ChangeStatusSettlementRequest) error
	//Quyết toán
	AccountingSettlement(context.Context, *AccountingSettlementRequest, *AccountingSettlementRequest) error
	//Quyết toán Nạp tiền Promotion
	AccountingPromotionDeposit(context.Context, *AccountingPromotionDepositRequest, *AccountingPromotionDepositRequest) error
	//Quyết toán Rút tiền Promotion
	AccountingPromotionWithdraw(context.Context, *AccountingPromotionWithdrawRequest, *AccountingPromotionWithdrawRequest) error
	//Bút toán kết chuyển GL Gpay
	AccountingChangeGpay(context.Context, *AccountingChangeGpayRequest, *AccountingChangeGpayRequest) error
	//Nạp wallet GPAY
	DepositGpay(context.Context, *DepositGpayRequest, *DepositGpayRequest) error
	//withdraw wallet GPAY
	WithdrawWallet(context.Context, *WithdrawWalletRequest, *WithdrawWalletRequest) error
	//Quyết toán Rút tiền Promotion
	AccountingPromotion(context.Context, *AccountingPromotionRequest, *AccountingPromotionRequest) error
	FindTransactionByParams(context.Context, *ETransactionDTO, *ETransactionDTO) error
	// Init merchant acount after create merchant
	InitMerchantAccount(context.Context, *InitMerchantAccountReq, *InitMerchantAccountReq) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) error {
	type service interface {
		FindByTransactionId(ctx context.Context, in *FindByTransactionIdRequest, out *FindByTransactionIdResponse) error
		FilterTransaction(ctx context.Context, in *FilterTransactionRequest, out *FilterTransactionResponse) error
		InitPayment(ctx context.Context, in *TransactionDTO, out *InitTransactionResponse) error
		MakePayment(ctx context.Context, in *MakePaymentRequest, out *MakePaymentResponse) error
		CancelTransactionId(ctx context.Context, in *CancelTransactionIdRequest, out *CancelTransactionIdResponse) error
		UpdateTransactionById(ctx context.Context, in *TransactionRequest, out *UpdateTransactionResponse) error
		CheckPendingTransactionShip(ctx context.Context, in *CheckPendingTransactionRequest, out *CheckPendingTransactionResponse) error
		ProcessCashback(ctx context.Context, in *ProcessCashbackRequest, out *ProcessCashbackResponse) error
		UpdateIncrementAmount(ctx context.Context, in *UpdateIncrementAmountRequest, out *UpdateIncrementAmountResponse) error
		UpdateDecrementAmount(ctx context.Context, in *UpdateDecrementAmountRequest, out *UpdateDecrementAmountResponse) error
		UpdateUserIncurred(ctx context.Context, in *UpdateUserIncurredRequest, out *UpdateUserIncurredResponse) error
		CheckTransactionLimitFee(ctx context.Context, in *CheckTransactionLimitFeeRequest, out *CheckTransactionLimitFeeResponse) error
		GetUserLimit(ctx context.Context, in *CheckTransactionQuotaAndFeeReq, out *GetUserLimitResponse) error
		GetTransactionAmountByTimeRange(ctx context.Context, in *GetTransactionAmountRequest, out *GetTransactionAmountResponse) error
		CountTransactionsByTimeRange(ctx context.Context, in *CountTransactionsRequest, out *CountTransactionsResponse) error
		FindTransactionByID(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error
		InitTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error
		ConfirmTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error
		CheckTransactionQuotaAndFee(ctx context.Context, in *CheckTransactionQuotaAndFeeReq, out *CheckTransactionQuotaAndFeeRes) error
		UpdateTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error
		CancelTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error
		GetCheckFeeSuccessTransactionStatsByTimeRange(ctx context.Context, in *GetCheckFeeSuccessTransactionStatsByTimeRangeReq, out *GetCheckFeeSuccessTransactionStatsByTimeRangeRes) error
		CountCheckFeeTransactionsByTimeRange(ctx context.Context, in *CountCheckFeeTransactionsByTimeRangeReq, out *CountCheckFeeTransactionsByTimeRangeRes) error
		FindCheckFeeTransactionsByTimeRange(ctx context.Context, in *FindCheckFeeTransactionsByTimeRangeReq, out *ListETransactionDTO) error
		ReverseTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error
		ChangeStatusChecking(ctx context.Context, in *ChangeStatusCheckingRequest, out *ChangeStatusCheckingRequest) error
		ChangeStatusSettlement(ctx context.Context, in *ChangeStatusSettlementRequest, out *ChangeStatusSettlementRequest) error
		AccountingSettlement(ctx context.Context, in *AccountingSettlementRequest, out *AccountingSettlementRequest) error
		AccountingPromotionDeposit(ctx context.Context, in *AccountingPromotionDepositRequest, out *AccountingPromotionDepositRequest) error
		AccountingPromotionWithdraw(ctx context.Context, in *AccountingPromotionWithdrawRequest, out *AccountingPromotionWithdrawRequest) error
		AccountingChangeGpay(ctx context.Context, in *AccountingChangeGpayRequest, out *AccountingChangeGpayRequest) error
		DepositGpay(ctx context.Context, in *DepositGpayRequest, out *DepositGpayRequest) error
		WithdrawWallet(ctx context.Context, in *WithdrawWalletRequest, out *WithdrawWalletRequest) error
		AccountingPromotion(ctx context.Context, in *AccountingPromotionRequest, out *AccountingPromotionRequest) error
		FindTransactionByParams(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error
		InitMerchantAccount(ctx context.Context, in *InitMerchantAccountReq, out *InitMerchantAccountReq) error
	}
	type Service struct {
		service
	}
	h := &serviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Service{h}, opts...))
}

type serviceHandler struct {
	ServiceHandler
}

func (h *serviceHandler) FindByTransactionId(ctx context.Context, in *FindByTransactionIdRequest, out *FindByTransactionIdResponse) error {
	return h.ServiceHandler.FindByTransactionId(ctx, in, out)
}

func (h *serviceHandler) FilterTransaction(ctx context.Context, in *FilterTransactionRequest, out *FilterTransactionResponse) error {
	return h.ServiceHandler.FilterTransaction(ctx, in, out)
}

func (h *serviceHandler) InitPayment(ctx context.Context, in *TransactionDTO, out *InitTransactionResponse) error {
	return h.ServiceHandler.InitPayment(ctx, in, out)
}

func (h *serviceHandler) MakePayment(ctx context.Context, in *MakePaymentRequest, out *MakePaymentResponse) error {
	return h.ServiceHandler.MakePayment(ctx, in, out)
}

func (h *serviceHandler) CancelTransactionId(ctx context.Context, in *CancelTransactionIdRequest, out *CancelTransactionIdResponse) error {
	return h.ServiceHandler.CancelTransactionId(ctx, in, out)
}

func (h *serviceHandler) UpdateTransactionById(ctx context.Context, in *TransactionRequest, out *UpdateTransactionResponse) error {
	return h.ServiceHandler.UpdateTransactionById(ctx, in, out)
}

func (h *serviceHandler) CheckPendingTransactionShip(ctx context.Context, in *CheckPendingTransactionRequest, out *CheckPendingTransactionResponse) error {
	return h.ServiceHandler.CheckPendingTransactionShip(ctx, in, out)
}

func (h *serviceHandler) ProcessCashback(ctx context.Context, in *ProcessCashbackRequest, out *ProcessCashbackResponse) error {
	return h.ServiceHandler.ProcessCashback(ctx, in, out)
}

func (h *serviceHandler) UpdateIncrementAmount(ctx context.Context, in *UpdateIncrementAmountRequest, out *UpdateIncrementAmountResponse) error {
	return h.ServiceHandler.UpdateIncrementAmount(ctx, in, out)
}

func (h *serviceHandler) UpdateDecrementAmount(ctx context.Context, in *UpdateDecrementAmountRequest, out *UpdateDecrementAmountResponse) error {
	return h.ServiceHandler.UpdateDecrementAmount(ctx, in, out)
}

func (h *serviceHandler) UpdateUserIncurred(ctx context.Context, in *UpdateUserIncurredRequest, out *UpdateUserIncurredResponse) error {
	return h.ServiceHandler.UpdateUserIncurred(ctx, in, out)
}

func (h *serviceHandler) CheckTransactionLimitFee(ctx context.Context, in *CheckTransactionLimitFeeRequest, out *CheckTransactionLimitFeeResponse) error {
	return h.ServiceHandler.CheckTransactionLimitFee(ctx, in, out)
}

func (h *serviceHandler) GetUserLimit(ctx context.Context, in *CheckTransactionQuotaAndFeeReq, out *GetUserLimitResponse) error {
	return h.ServiceHandler.GetUserLimit(ctx, in, out)
}

func (h *serviceHandler) GetTransactionAmountByTimeRange(ctx context.Context, in *GetTransactionAmountRequest, out *GetTransactionAmountResponse) error {
	return h.ServiceHandler.GetTransactionAmountByTimeRange(ctx, in, out)
}

func (h *serviceHandler) CountTransactionsByTimeRange(ctx context.Context, in *CountTransactionsRequest, out *CountTransactionsResponse) error {
	return h.ServiceHandler.CountTransactionsByTimeRange(ctx, in, out)
}

func (h *serviceHandler) FindTransactionByID(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error {
	return h.ServiceHandler.FindTransactionByID(ctx, in, out)
}

func (h *serviceHandler) InitTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error {
	return h.ServiceHandler.InitTransaction(ctx, in, out)
}

func (h *serviceHandler) ConfirmTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error {
	return h.ServiceHandler.ConfirmTransaction(ctx, in, out)
}

func (h *serviceHandler) CheckTransactionQuotaAndFee(ctx context.Context, in *CheckTransactionQuotaAndFeeReq, out *CheckTransactionQuotaAndFeeRes) error {
	return h.ServiceHandler.CheckTransactionQuotaAndFee(ctx, in, out)
}

func (h *serviceHandler) UpdateTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error {
	return h.ServiceHandler.UpdateTransaction(ctx, in, out)
}

func (h *serviceHandler) CancelTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error {
	return h.ServiceHandler.CancelTransaction(ctx, in, out)
}

func (h *serviceHandler) GetCheckFeeSuccessTransactionStatsByTimeRange(ctx context.Context, in *GetCheckFeeSuccessTransactionStatsByTimeRangeReq, out *GetCheckFeeSuccessTransactionStatsByTimeRangeRes) error {
	return h.ServiceHandler.GetCheckFeeSuccessTransactionStatsByTimeRange(ctx, in, out)
}

func (h *serviceHandler) CountCheckFeeTransactionsByTimeRange(ctx context.Context, in *CountCheckFeeTransactionsByTimeRangeReq, out *CountCheckFeeTransactionsByTimeRangeRes) error {
	return h.ServiceHandler.CountCheckFeeTransactionsByTimeRange(ctx, in, out)
}

func (h *serviceHandler) FindCheckFeeTransactionsByTimeRange(ctx context.Context, in *FindCheckFeeTransactionsByTimeRangeReq, out *ListETransactionDTO) error {
	return h.ServiceHandler.FindCheckFeeTransactionsByTimeRange(ctx, in, out)
}

func (h *serviceHandler) ReverseTransaction(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error {
	return h.ServiceHandler.ReverseTransaction(ctx, in, out)
}

func (h *serviceHandler) ChangeStatusChecking(ctx context.Context, in *ChangeStatusCheckingRequest, out *ChangeStatusCheckingRequest) error {
	return h.ServiceHandler.ChangeStatusChecking(ctx, in, out)
}

func (h *serviceHandler) ChangeStatusSettlement(ctx context.Context, in *ChangeStatusSettlementRequest, out *ChangeStatusSettlementRequest) error {
	return h.ServiceHandler.ChangeStatusSettlement(ctx, in, out)
}

func (h *serviceHandler) AccountingSettlement(ctx context.Context, in *AccountingSettlementRequest, out *AccountingSettlementRequest) error {
	return h.ServiceHandler.AccountingSettlement(ctx, in, out)
}

func (h *serviceHandler) AccountingPromotionDeposit(ctx context.Context, in *AccountingPromotionDepositRequest, out *AccountingPromotionDepositRequest) error {
	return h.ServiceHandler.AccountingPromotionDeposit(ctx, in, out)
}

func (h *serviceHandler) AccountingPromotionWithdraw(ctx context.Context, in *AccountingPromotionWithdrawRequest, out *AccountingPromotionWithdrawRequest) error {
	return h.ServiceHandler.AccountingPromotionWithdraw(ctx, in, out)
}

func (h *serviceHandler) AccountingChangeGpay(ctx context.Context, in *AccountingChangeGpayRequest, out *AccountingChangeGpayRequest) error {
	return h.ServiceHandler.AccountingChangeGpay(ctx, in, out)
}

func (h *serviceHandler) DepositGpay(ctx context.Context, in *DepositGpayRequest, out *DepositGpayRequest) error {
	return h.ServiceHandler.DepositGpay(ctx, in, out)
}

func (h *serviceHandler) WithdrawWallet(ctx context.Context, in *WithdrawWalletRequest, out *WithdrawWalletRequest) error {
	return h.ServiceHandler.WithdrawWallet(ctx, in, out)
}

func (h *serviceHandler) AccountingPromotion(ctx context.Context, in *AccountingPromotionRequest, out *AccountingPromotionRequest) error {
	return h.ServiceHandler.AccountingPromotion(ctx, in, out)
}

func (h *serviceHandler) FindTransactionByParams(ctx context.Context, in *ETransactionDTO, out *ETransactionDTO) error {
	return h.ServiceHandler.FindTransactionByParams(ctx, in, out)
}

func (h *serviceHandler) InitMerchantAccount(ctx context.Context, in *InitMerchantAccountReq, out *InitMerchantAccountReq) error {
	return h.ServiceHandler.InitMerchantAccount(ctx, in, out)
}
